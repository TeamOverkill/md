<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="frame_8cpp" kind="file" language="C++">
    <compoundname>frame.cpp</compoundname>
    <includes refid="frame_8h" local="yes">frame.h</includes>
    <incdepgraph>
      <node id="59">
        <label>stdlib.h</label>
      </node>
      <node id="55">
        <label>frame.cpp</label>
        <link refid="frame_8cpp"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>Eigen/Dense</label>
      </node>
      <node id="63">
        <label>vector</label>
      </node>
      <node id="57">
        <label>base.h</label>
        <link refid="base_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>iostream</label>
      </node>
      <node id="56">
        <label>frame.h</label>
        <link refid="frame_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>atom.h</label>
        <link refid="atom_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>stdio.h</label>
      </node>
      <node id="62">
        <label>constants.h</label>
        <link refid="constants_8h_source"/>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;frame.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_frame_1ae7615c7221ced614d59ce461deed3a5f" kindref="member">Frame::fStep</ref>;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Frame::frameCounter;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">Frame::Frame(){</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>Constructor</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector<sp/>&lt;<sp/>double<sp/>&gt;<sp/>&gt;<sp/>temp(base::numOfAtoms);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>base::numOfAtoms;<sp/>i++){</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[i].resize(6);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>frameCounter++;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Increase<sp/>frame<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_frame_1a78558e230dba7e5bf57916d38af7536c" kindref="member">Frame::initialize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numberOfFrames){</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>frameCounter<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//Counter<sp/>which<sp/>holds<sp/>the<sp/>number<sp/>of<sp/>frames<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_frame_1ae7615c7221ced614d59ce461deed3a5f" kindref="member">fStep</ref><sp/>=<sp/>base::iterations/numberOfFrames;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Save<sp/>frame<sp/>to<sp/>trajectory<sp/>every<sp/>fStep<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_frame_1a03b0febb7a423f343a97f5b937ca74bb" kindref="member">Frame::save_state</ref>(<ref refid="class_atom" kindref="compound">Atom</ref><sp/>**atoms){</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>base::numOfAtoms;<sp/>i++){</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[i][0]<sp/>=<sp/>atoms[i]-&gt;<ref refid="class_atom_1a9c44a53717ca3857065c0a36787359e1" kindref="member">pos</ref>[0];</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[i][1]<sp/>=<sp/>atoms[i]-&gt;<ref refid="class_atom_1a9c44a53717ca3857065c0a36787359e1" kindref="member">pos</ref>[1];</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[i][2]<sp/>=<sp/>atoms[i]-&gt;<ref refid="class_atom_1a9c44a53717ca3857065c0a36787359e1" kindref="member">pos</ref>[2];</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[i][3]<sp/>=<sp/>atoms[i]-&gt;<ref refid="class_atom_1aabc1e87e4ed861ae02f781d3f43d8481" kindref="member">vel</ref>[0];</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[i][4]<sp/>=<sp/>atoms[i]-&gt;<ref refid="class_atom_1aabc1e87e4ed861ae02f781d3f43d8481" kindref="member">vel</ref>[1];</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state[i][5]<sp/>=<sp/>atoms[i]-&gt;<ref refid="class_atom_1aabc1e87e4ed861ae02f781d3f43d8481" kindref="member">vel</ref>[2];</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_frame_1aa3523e2ec8247c6c5f2bb102d5016971" kindref="member">Frame::save_to_file</ref>(<ref refid="class_frame" kindref="compound">Frame</ref><sp/>**frames){</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;output.gro&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(f<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>open<sp/>file!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>Frame::frameCounter;<sp/>j++){</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;Generated<sp/>by<sp/>Slaymulator,<sp/>t=%i\n&quot;</highlight><highlight class="normal">,<sp/>j);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;%d\n&quot;</highlight><highlight class="normal">,<sp/>base::numOfAtoms);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>base::numOfAtoms;<sp/>i++){</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;%5d%-5s%5s%5d%8.3f%8.3f%8.3f%8.4f%8.4f%8.4f\n&quot;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;ion&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;asd&quot;</highlight><highlight class="normal">,<sp/>i<sp/>+<sp/>1,<sp/>frames[j]-&gt;state[i][0],<sp/>frames[j]-&gt;state[i][1],<sp/>frames[j]-&gt;state[i][2],<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frames[j]-&gt;state[i][3],<sp/>frames[j]-&gt;state[i][4],<sp/>frames[j]-&gt;state[i][5]);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;%lf<sp/><sp/><sp/><sp/>%lf<sp/><sp/><sp/><sp/><sp/>%lf\n&quot;</highlight><highlight class="normal">,<sp/>base::boxDim,<sp/>base::boxDim,<sp/>base::boxDim);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="frame.cpp"/>
  </compounddef>
</doxygen>
